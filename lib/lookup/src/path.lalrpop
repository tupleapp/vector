use crate::{Lookup, Segment, Field};
use std::str::FromStr;

grammar;

pub Lookup: Lookup<'input> = {
  <s: PathSegment> <l: Lookup?> => match l {
    None => Lookup::from(s),
    Some(mut l) => {
      l.push_front(s);
      l
    }
  },
  "." => Lookup::root(),
}

PathSegment: Segment<'input> = {
  "."? <Field> => Segment::field(<>),
  "[" <Index> "]" => Segment::index(<>),
  "."? "(" <v:(<Field> "|")+> <e:Field> ")" => {
    let mut v = v;
    v.push(e);
    Segment::coalesce(v)
  }
}

Field: Field<'input> = {
   <s:r"[0-9]*[a-zA-Z_][0-9a-zA-Z_]*"> => Field::from(s),
   <s:r#""(\\"|[^"])+""#> => Field::from(s),
}

Index: isize = {
  r"-?[0-9]+" => isize::from_str(<>).unwrap()
}
